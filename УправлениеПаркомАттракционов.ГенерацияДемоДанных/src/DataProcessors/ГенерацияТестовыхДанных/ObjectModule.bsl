
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ЗагрузитьКлиентов() Экспорт
	
	ИсходныеДанные = ПолучитьМакет("Клиенты");
	
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	
	Для Сч = 2 По ИсходныеДанные.ВысотаТаблицы Цикл
		
		ФИО = ИсходныеДанные.Область(Сч, 1).Текст;
		ПолСтрока = ИсходныеДанные.Область(Сч, 2).Текст;
		ДатаРожденияСтрока = ИсходныеДанные.Область(Сч, 3).Текст;
		
		Если ПолСтрока = "М" Тогда
			Пол = Перечисления.ПолФизическогоЛица.Мужской;
		Иначе
			Пол = Перечисления.ПолФизическогоЛица.Женский;
		КонецЕсли;
		
		ДатаРождения = Дата(Сред(ДатаРожденияСтрока, 7, 4), Сред(ДатаРожденияСтрока, 4, 2), Лев(ДатаРожденияСтрока, 2));
		
		Ссылка = Справочники.Клиенты.НайтиПоНаименованию(ФИО, Истина);
		
		Если Не ЗначениеЗаполнено(Ссылка) Тогда
			СпрОбъект = Справочники.Клиенты.СоздатьЭлемент();
			СпрОбъект.Заполнить(Неопределено);
			СпрОбъект.Наименование = ФИО;
			СпрОбъект.Телефон = СлучайныйТелефон(ГСЧ);
		Иначе
			СпрОбъект = Ссылка.ПолучитьОбъект();
		КонецЕсли;
		
		СпрОбъект.Пол = Пол;
		СпрОбъект.ДатаРождения = ДатаРождения;
		
		СпрОбъект.Записать();
		
		Запись = РегистрыСведений.ДД_ПредпочтенияКлиентов.СоздатьМенеджерЗаписи();
		Запись.Клиент = СпрОбъект.Ссылка;
		Запись.ВидАттракциона = СлучайныйВидАттракционов(ГСЧ);
		Запись.КоличествоПосещений = СлучайноеКоличествоПосещений(ГСЧ);
		Запись.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьПогоду() Экспорт
	
	ИсходныеДанные = ПолучитьМакет("Погода");
	
	Для Сч = 2 По ИсходныеДанные.ВысотаТаблицы Цикл
		
		ПериодИзмеренияСтрока = ИсходныеДанные.Область(Сч, 1).Текст;
		Температура = Число(ИсходныеДанные.Область(Сч, 2).Текст);
		КоличествоОсадковСтрока = ИсходныеДанные.Область(Сч, 3).Текст;
		СкоростьВетра = Число(ИсходныеДанные.Область(Сч, 4).Текст);
		
		КоличествоОсадков = 0;
		Если ЗначениеЗаполнено(КоличествоОсадковСтрока) Тогда
			КоличествоОсадков = Число(КоличествоОсадковСтрока);
		КонецЕсли;
		 		
		ПериодИзмерения = Дата(
			Сред(ПериодИзмеренияСтрока, 7, 4), Сред(ПериодИзмеренияСтрока, 4, 2), Лев(ПериодИзмеренияСтрока, 2),
			Сред(ПериодИзмеренияСтрока, 12, 2), 0, 0);
			
		Запись = РегистрыСведений.ПогодныеУсловия.СоздатьМенеджерЗаписи();
		Запись.ПериодИзмерения = ПериодИзмерения;
		Запись.СредняяТемпература = Температура;
		Запись.СредняяСкоростьВетра = СкоростьВетра;
		Запись.КоличествоОсадков = КоличествоОсадков;
		
		Запись.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры

// Сгенерировать данные.
// Заполняет базу данных случайными данными о посещениях
//
Процедура СгенерироватьДанные() Экспорт
	
	СписокПосетителей = СписокПосетителей();
	
	СписокАттракционов = СписокАттракционов();
	
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	
	Курсор = Период.ДатаНачала;
	
	// Рассчитываем каждый день периода	
	// Определяем сколько посетителей придет в парк
	//  В понедельник коэффициент 0.7
	//	Коэффициент в выходные дни - 1,5
	//  Коэффициент в праздники - 2
	// Выбираем случайных посетитетей из списка	
	Пока Курсор < Период.ДатаОкончания Цикл
		
		КоэффициентДня = 1;		
		РабочийДень = Истина;
		
		Если Курсор = '20240501' Или Курсор = '20240509' Тогда
			КоэффициентДня = 2;
			РабочийДень = Ложь;
		ИначеЕсли ДеньНедели(Курсор) = 1 Тогда
			КоэффициентДня = 0.7;
		ИначеЕсли ДеньНедели(Курсор) >= 6 Тогда
			КоэффициентДня = 1.5;
			РабочийДень = Ложь;
		КонецЕсли;
		
		Для КурсорЧаса = 1 По 4 Цикл
			
			Час = 6 + КурсорЧаса * 3;
			
			КоэффициентЧаса = 1;
			Если РабочийДень И Час < 18 Тогда
				КоэффициентЧаса = 0.3;
			КонецЕсли;
			
			Время = Курсор + Час * 3600;
			
			//@skip-check query-in-loop
			КоэффициентПогоды = КоэффициентПогоды(Время);
			
			КоличествоПосетителей = 
				Цел(ГСЧ.СлучайноеЧисло(7, 10) * КоэффициентДня * КоэффициентПогоды * КоэффициентЧаса);
				
			Для НомерПосетителя = 1 По КоличествоПосетителей Цикл
				
				Если ЭтоУчастникПрограммыЛояльности(ГСЧ) Тогда
					ИндексСлучайногоПосетителя = ГСЧ.СлучайноеЧисло(0, 99);
					ОписаниеПосетителя = СписокПосетителей[ИндексСлучайногоПосетителя];
					Посетитель = ОписаниеПосетителя.Клиент;
					ВидАттракциона = ОписаниеПосетителя.ВидАттракциона;
					КоличествоПосещений = ОписаниеПосетителя.КоличествоПосещений;
				Иначе
					Посетитель = Справочники.Клиенты.РозничныйПокупатель;
					ВидАттракциона = СлучайныйВидАттракционов(ГСЧ);
					КоличествоПосещений = СлучайноеКоличествоПосещений(ГСЧ);
				КонецЕсли;				
				
				//@skip-check query-in-loop
				СформироватьПосещенияПосетителя(Посетитель, Время, 
					СписокАттракционов, ВидАттракциона, КоличествоПосещений, ГСЧ);				
			
			КонецЦикла;				
			
		КонецЦикла;	
		
		Курсор = Курсор + 86400;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//@skip-check query-in-loop
Процедура СформироватьПосещенияПосетителя(Посетитель, Время, 
					СписокАттракционов, ВидАттракциона, КоличествоАттракционов, ГСЧ)
	
	Для Сч = 1 По КоличествоАттракционов Цикл
		
		ВидАттракционаПосещения = ВидАттракциона;
		
		Если ПопробоватьДругойВид(ГСЧ) Тогда
			ВидАттракционаПосещения = СлучайныйВидАттракционов(ГСЧ);
		КонецЕсли;
		
		Аттракцион = СлучайныйАттракционВида(СписокАттракционов, ВидАттракционаПосещения, ГСЧ);
		
		Если Посетитель = Справочники.Клиенты.РозничныйПокупатель Тогда			
			ОснованиеПосещения = КупитьБилет(Посетитель, Аттракцион, Время, Истина, ГСЧ);
		Иначе		
			ОснованиеПосещения = ТекущееОснование(Посетитель, Аттракцион);		
			Если Не ЗначениеЗаполнено(ОснованиеПосещения) Тогда		
				ОснованиеПосещения = КупитьБилет(Посетитель, Аттракцион, Время, Ложь, ГСЧ);
			КонецЕсли;
		КонецЕсли;
		
		ЗарегистрироватьПосещение(ОснованиеПосещения, Аттракцион, Время);
		
	КонецЦикла;

КонецПроцедуры
Функция СписокПосетителей()
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДД_ПредпочтенияКлиентов.Клиент,
		|	ДД_ПредпочтенияКлиентов.ВидАттракциона,
		|	ДД_ПредпочтенияКлиентов.КоличествоПосещений
		|ИЗ
		|	РегистрСведений.ДД_ПредпочтенияКлиентов КАК ДД_ПредпочтенияКлиентов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОписаниеПосетителя = Новый Структура;
		ОписаниеПосетителя.Вставить("Клиент", Выборка.Клиент);
		ОписаниеПосетителя.Вставить("ВидАттракциона", Выборка.ВидАттракциона);
		ОписаниеПосетителя.Вставить("КоличествоПосещений", Выборка.КоличествоПосещений);
		
		Результат.Добавить(ОписаниеПосетителя);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СписокАттракционов()
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДД_ПопулярностьАттракционов.Аттракцион.ВидАттракциона КАК ВидАттракциона,
		|	ДД_ПопулярностьАттракционов.Аттракцион,
		|	ДД_ПопулярностьАттракционов.Популярность КАК Популярность
		|ИЗ
		|	РегистрСведений.ДД_ПопулярностьАттракционов КАК ДД_ПопулярностьАттракционов
		|ИТОГИ
		|	СУММА(Популярность)
		|ПО
		|	ВидАттракциона";
		
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		ТаблицаАттракционов = Новый ТаблицаЗначений();
		ТаблицаАттракционов.Колонки.Добавить("Аттракцион");
		ТаблицаАттракционов.Колонки.Добавить("НижняяГраница");
		ТаблицаАттракционов.Колонки.Добавить("ВерхняяГраница");
		
		Курсор = 1;
		
		ВыборкаАттракционы = Выборка.Выбрать();
		
		Пока ВыборкаАттракционы.Следующий() Цикл
			
			Строка = ТаблицаАттракционов.Добавить();
			Строка.Аттракцион = ВыборкаАттракционы.Аттракцион;
			Строка.НижняяГраница = Курсор;
			Строка.ВерхняяГраница = Курсор + ВыборкаАттракционы.Популярность - 1;
			
			Курсор = Курсор + ВыборкаАттракционы.Популярность;
			
		КонецЦикла;				
		
		ОписаниеВидаАттракциона = Новый Структура;
		ОписаниеВидаАттракциона.Вставить("ВерхняяГраница", Выборка.Популярность);
		ОписаниеВидаАттракциона.Вставить("Аттракционы", ТаблицаАттракционов);
		
		Результат.Вставить(Выборка.ВидАттракциона, ОписаниеВидаАттракциона);
		
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

Функция СлучайныйТелефон(ГСЧ)
	
	Результат = "+79";
	
	Для Сч = 1 По 9 Цикл
		
		Результат = Результат + ГСЧ.СлучайноеЧисло(0, 9);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Текущее основание.
// 
// Параметры:
//  Посетитель - СправочникСсылка.Клиенты -  Посетитель
//  Аттракцион - СправочникСсылка.Аттракционы -  Аттракцион
// 
// Возвращаемое значение:
//  ДокументСсылка.ПродажаБилета, Неопределено -  Текущее основание
Функция ТекущееОснование(Посетитель, Аттракцион)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АктивныеПосещенияОстатки.Основание КАК Основание
		|ИЗ
		|	РегистрНакопления.АктивныеПосещения.Остатки(, Основание.Клиент = &Посетитель
		|	И ВидАттракциона В
		|		(ВЫБРАТЬ
		|			Аттракционы.ВидАттракциона
		|		ИЗ
		|			Справочник.Аттракционы КАК Аттракционы
		|		ГДЕ
		|			Аттракционы.Ссылка = &Аттракцион)) КАК АктивныеПосещенияОстатки
		|ГДЕ
		|	АктивныеПосещенияОстатки.КоличествоПосещенийОстаток > 0";
		
	Запрос.УстановитьПараметр("Посетитель", Посетитель);
	Запрос.УстановитьПараметр("Аттракцион", Аттракцион);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		//@skip-check property-return-type
		Возврат Выборка.Основание;	
	КонецЕсли;
	
	Возврат Неопределено;	
	
КонецФункции

// Купить билет.
// 
// Параметры:
//  Посетитель - СправочникСсылка.Клиенты - Посетитель
//  Аттракцион - СправочникСсылка.Аттракционы - Аттракцион
//  ДатаПосещения - Дата - Дата посещения
//  Разовый - Булево - Подбирать только разовые билеты
//  ГСЧ - ГенераторСлучайныхЧисел, Неопределено -  ГСЧ
// 
// Возвращаемое значение:
//  ДокументСсылка.ПродажаБилета 
Функция КупитьБилет(Посетитель, Аттракцион, ДатаПосещения, Разовый, ГСЧ)
	
	ДоступнаяНоменклатура = ДоступнаяНоменклатура(Аттракцион, Разовый);
	
	ИндексНоменклатуры = ГСЧ.СлучайноеЧисло(0, ДоступнаяНоменклатура.ВГраница());
	
	Номенклатура = ДоступнаяНоменклатура[ИндексНоменклатуры];
	
	ДокОбъект = Документы.ПродажаБилета.СоздатьДокумент();
	ДокОбъект.Дата = ДатаПосещения;
	ДокОбъект.Заполнить(Неопределено);
	ДокОбъект.Клиент = Посетитель;
	
	СтрокаТЧ = ДокОбъект.ПозицииПродажи.Добавить();
	СтрокаТЧ.Номенклатура = Номенклатура;
	СтрокаТЧ.Количество = 1;
	СтрокаТЧ.Цена = РегистрыСведений.ЦеныНоменклатуры.ЦенаНоменклатуры(Номенклатура);
	СтрокаТЧ.Сумма = СтрокаТЧ.Цена;
	
	ДокОбъект.СуммаДокумента = ДокОбъект.ПозицииПродажи.Итог("Сумма");
	
	Если Не ДокОбъект.ПроверитьЗаполнение() Тогда
		ВызватьИсключение "Ошибка создания продажи";
	КонецЕсли;
	
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Функция ДоступнаяНоменклатура(Аттракцион, Разовый)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ВидАттракциона В
		|		(ВЫБРАТЬ
		|			Аттракционы.ВидАттракциона
		|		ИЗ
		|			Справочник.Аттракционы КАК Аттракционы
		|		ГДЕ
		|			Аттракционы.Ссылка = &Аттракцион)
		|	И (Номенклатура.КоличествоПосещений = 1
		|	ИЛИ НЕ &Разовый)";
		
	Запрос.УстановитьПараметр("Аттракцион", Аттракцион);
	Запрос.УстановитьПараметр("Разовый", Разовый);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция СлучайныйАттракционВида(СписокАттракционов, ВидАттракционаПосещения, ГСЧ)
	
	ДанныеДляВыборка = СписокАттракционов[ВидАттракционаПосещения];
	
	СлучайноеЧисло = ГСЧ.СлучайноеЧисло(1, ДанныеДляВыборка.ВерхняяГраница);
	
	Для Каждого Строка Из ДанныеДляВыборка.Аттракционы Цикл
		Если Строка.ВерхняяГраница >= СлучайноеЧисло И Строка.НижняяГраница <= СлучайноеЧисло Тогда
			Возврат Строка.Аттракцион;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция ЭтоУчастникПрограммыЛояльности(ГСЧ)
	
	Значение = ГСЧ.СлучайноеЧисло(1, 10);
	
	Если Значение < 5 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ЗарегистрироватьПосещение(ОснованиеПосещения, Аттракцион, ДатаПосещения)
	
	ДокОбъект = Документы.ПосещениеАттракциона.СоздатьДокумент();
	ДокОбъект.Заполнить(Неопределено);
	ДокОбъект.Дата = ДатаПосещения;
	ДокОбъект.Основание = ОснованиеПосещения;
	ДокОбъект.Аттракцион = Аттракцион;
	
	Если Не ДокОбъект.ПроверитьЗаполнение() Тогда
		ВызватьИсключение "Не удалось записать посещение";
	КонецЕсли;
	
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);	
	
КонецПроцедуры

Функция ПопробоватьДругойВид(ГСЧ)
	
	Значение = ГСЧ.СлучайноеЧисло(1, 10);
	
	Если Значение < 3 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция СлучайныйВидАттракционов(ГСЧ)
	
	Результат = ГСЧ.СлучайноеЧисло(1, 100);
	
	Если Результат < 41 Тогда
		Возврат Справочники.ВидыАттракционов.НайтиПоНаименованию("Детские аттракционы", Истина);
	ИначеЕсли Результат < 81 Тогда
		Возврат Справочники.ВидыАттракционов.НайтиПоНаименованию("Семейные аттракционы", Истина);
	Иначе
		Возврат Справочники.ВидыАттракционов.НайтиПоНаименованию("Экстремальные аттракционы", Истина);
	КонецЕсли;	
	
КонецФункции

Функция СлучайноеКоличествоПосещений(ГСЧ)
	
	Значение = ГСЧ.СлучайноеЧисло(1, 100);
	
	Если Значение < 11 Тогда
		Возврат 1;
	ИначеЕсли Значение < 31 Тогда
		Возврат 2;
	ИначеЕсли Значение < 71 Тогда
		Возврат 3;
	ИначеЕсли Значение < 91 Тогда
		Возврат 4;
	Иначе
		Возврат 5;
	КонецЕсли;
			
КонецФункции

Функция КоэффициентПогоды(Время)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПогодныеУсловия.КоличествоОсадков,
		|	ПогодныеУсловия.СредняяСкоростьВетра,
		|	ПогодныеУсловия.СредняяТемпература
		|ИЗ
		|	РегистрСведений.ПогодныеУсловия КАК ПогодныеУсловия
		|ГДЕ
		|	ПогодныеУсловия.ПериодИзмерения = &Время";
		
	Запрос.УстановитьПараметр("Время", Время);

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат (52 + Выборка.СредняяТемпература * 2) * 
			?(Выборка.КоличествоОсадков > 0, 0.5, 1) *
			?(Выборка.СредняяСкоростьВетра > 3, 0.5, 1);
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции

#КонецОбласти

#КонецЕсли
